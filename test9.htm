<html>
<head>
<style type="text/css" >
.whiterectangle { color: white; background-color: white; z-index: 0;}
.blackrectangle { color: black; background-color: black; z-index: 1;}
.jgdialog { position: absolute; top:0; left:460; z-index:1; }
</style>
<script type="text/javascript" >

var jgpointbase = {
	x: 0,
	y: 0
};

var msize = 0.1;

function jgpoint( ) {
	this.prototype = jgpointbase;
	//this.x = x;
	//this.y = y;
};

function jgptsc( x, y ) {
		var rval = new jgpoint( );
		rval.x =  this.screenx0 + (( this.screenx1 - this.screenx0 ) / ( this.x1 - this.x0 )) * ( x - this.x0 );
		rval.y =  this.screeny0 + (( this.screeny1 - this.screeny0 ) / ( this.y1 - this.y0 )) * ( y - this.y0 );
		return( rval );
}

var jgcoordinatesbase = {
	x0: -1.25,
	screenx0: 50,
	y0: -1.25,
	screeny0: 450,
	x1: 1.25,
	screenx1: 450,
	y1: 1.25,
	screeny1: 50,
	pointToScreenCoordinates: jgptsc,
	scaleToCurve: function ( curvefn, fnstart, fnstop, delta ) {
		var pt;
		var fofpt;

		// get maximum and minimum x and y values
		fofpt = curvefn( fnstart );
		var minx = fnstart;
		var miny = fofpt.y;
		var maxx = fnstop;
		var maxy = fofpt.y;
		for( pt = fnstart + delta ; pt < fnstop; pt += delta ) {
			fofpt = curvefn( pt );
			if( fofpt.y > maxy ) {
				maxy = fofpt.y;
			}
			if( fofpt.y < miny ) {
				miny = fofpt.y;
			}
		}
		var aspectratio = ( this.y1 - this.y0 ) / ( this.x1 - this.x0 );
		if( this.y0 < miny ) {
			miny = this.y0;
		}
		if( this.y1 > maxy ) {
			maxy = this.y1;
		}
		if( this.x0 < minx ) {
			minx = this.x0;
		}
		if( this.x1 > maxx ) {
			maxx = this.x1;
		}
		var newaspectratio = ( maxy - miny ) / (maxx - minx );
		if( newaspectratio > aspectratio ) {
			// match y values and scale x values
			this.y0 = miny;
			this.y1 = maxy;
			var xlength = 1 / aspectratio * ( maxy - miny );
			this.x0 = minx + (maxx - minx) / 2 - xlength / 2;
			this.x1 = minx + (maxx - minx) / 2 + xlength / 2;
		} else {
			// match x values and scale y values
			this.x0 = minx;
			this.x1 = maxx;
			var ylength = aspectratio * ( maxx - minx );
			this.y0 = miny + (maxy - miny) / 2 - ylength / 2;
			this.y1 = miny + (maxy - miny) / 2 + ylength / 2;
		}
	}
};

function jgcoordinates() {
}

jgcoordinates.prototype = jgcoordinatesbase;


function drawrectangle( myclass, top, left, width, height )
{
	var bodylist = document.getElementsByTagName( "body" );
	var rect = document.createElement( "div" );
	var mystyle = 'position:absolute;top:' + top + ";left:" + left + ';width:' + width + ";height:" + height;
	rect.setAttribute( "class", myclass );
	rect.setAttribute( "style", mystyle );
	bodylist[0].appendChild( rect );
}

function drawline( width, x1, y1, x2, y2 )
{
	var x, y, nexty, nextx;
	x1 = Math.round( x1 );
	y1 = Math.round( y1 );
	x2 = Math.round( x2 );
	y2 = Math.round( y2 );
	// ensure x1, y1 is leftmost point
	if( x1 > x2 ) {
		tmp = x2;
		x2 = x1;
		x1 = tmp;
		tmp = y2;
		y2 = y1;
		y1 = tmp;
	}
	var dx = x2 - x1;
	var dy = y2 - y1;

	if( dy == 0 ) { // horizontal line
		drawrectangle( "blackrectangle", y1 - width / 2, x1, dx, width );
		return;
	} else if ( dx == 0 ) { // vertical line
		if( dy < 0 ) {
			y1 = y2;
			dy = -dy;
		}
		drawrectangle( "blackrectangle", y1, x1 - width / 2, width, dy );
		return;
	}
	var slope = dy / dx;
	if( slope > 1 || slope < -1 ) {
		// one x per multiple y
		if( y1 < y2 ) {
			y = y1;
			for( x = x1 ; x < x2 ; x += 1 ) {
				nexty = y + slope;
				drawrectangle( "blackrectangle", y, x - width / 2, width, nexty - y );
				y = nexty;
			}
		} else {
			y = y1;
			for( x = x1 ; x < x2 ; x += 1 ) {
				nexty = y + slope;
				drawrectangle( "blackrectangle", nexty, x - width / 2, width, y - nexty );
				y = nexty;
			}
		}

	} else {
		// one y per multiple x
		if( y1 < y2 ){
			x = x1;
			for( y = y1 ; y < y2 ; y += 1 ) {
				nextx = x + 1 / slope;
				drawrectangle( "blackrectangle", y - width / 2, x, nextx - x, width );
				x = nextx;
			}
		} else {
			x = x2;
			for( y = y2 ; y < y1 ; y += 1 ) {
				nextx = x + 1 / slope;
				drawrectangle( "blackrectangle", y - width / 2, nextx, x - nextx, width );
				x = nextx;
			}
		}
	}
		
	
}

function jgcircle( angle ) {
	var rval = new jgpoint();

	rval.x = Math.cos( angle );
	rval.y = Math.sin( angle );
	return( rval );
}

function jgcos1overx2( x ) {
	var rval = new jgpoint();

	rval.x = x;
	rval.y = Math.cos( 1 / ( x * x ) );
	return rval;
}

function jgptdiff( fn, x, delta ) {
	var rval = new jgpoint();

	rval.x = x;
	rval.y = -( fn( x ).y - fn( x + delta).y) / ( delta ); 
	//bit of a hack to keep the integration function from reseting
	return( rval );
}

function jgdiff( fn, delta ) {
	var rval = function( x ) {
		return jgptdiff( fn, x, delta );
	}
	return rval;
}

function jgptint( fn, x, delta ) {
	var rval = new jgpoint();

	rval.x = x;
	rval.y = fn( x - delta ).y * delta;
	return( rval );
}

function jgint( fn, delta ) {
	var sum = 0;
	var lastx = 1000;
	var rval = function( x ) {
		if( x < lastx ) {
			// assume new integral, reset
			sum = 0;
		} else {
			delta = x - lastx;
		}
		var pt = jgptint( fn, x, delta );
		sum += pt.y;
		pt.y = sum;
		lastx = x;
		return( pt );
	}
	return rval;
}

function xsquared( x ) {
	var rval = new jgpoint();

	rval.x = x;
	rval.y = x * x;
	return( rval );
}
		

function drawcurve( curvefn, coord, fnstart, fnstop, delta ) {
	var pt;
	var fofpt;
	var screenpt, newscreenpt;

	fofpt = curvefn( fnstart );
	screenpt = coord.pointToScreenCoordinates( fofpt.x, fofpt.y );
	for( pt = fnstart + delta ; pt < fnstop ; pt += delta ) {
		fofpt = curvefn( pt );
		newscreenpt = coord.pointToScreenCoordinates( fofpt.x, fofpt.y );
		if( screenpt.x != newscreenpt.x || screenpt.y != newscreenpt.y ) {
			drawline( 4, screenpt.x, screenpt.y, newscreenpt.x, newscreenpt.y );
			screenpt = newscreenpt;		
		}
	}
}

function makefn( formula ) {
	var rfn = function( x ) {
		var rval = eval( formula + ";" );
		return rval;
	}
	return rfn;
}

function makepathfn( xfn, yfn ) {
	var rfn = function ( t ) {
		var pt = new jgpoint();

		pt.x = xfn( t );
		pt.y = yfn( t );
		return( pt );
	}
	return rfn;
}

function diff( exp ) {

	var xfn = makefn( "x" );
	var yfn = makefn( exp );
	var pfn = makepathfn( xfn, yfn );
	var dfn = jgdiff( pfn, msize );
	var rfn = function ( x ) {
		var pt = dfn( x );
		return( pt.y );
	}
	return( rfn );
}

function integrate( exp ) {

	var xfn = makefn( "x" );
	var yfn = makefn( exp );
	var pfn = makepathfn( xfn, yfn );
	var dfn = jgint( pfn, msize );
	var rfn = function ( x ) {
		var pt = dfn( x );
		return ( pt.y );
	}
	return( rfn );
}

var integratex = integrate( "x" );
var differentiatex = diff( "x" );

function jggraph( coord ) {
	var xformula = document.forms[ "jg_input"].elements[ "xformula" ].value; //"x*x;";
	var yformula = document.forms[ "jg_input"].elements[ "yformula" ].value; //"x;";

	var xfn = makefn( xformula );
	var yfn = makefn( yformula );
	var pfn = makepathfn( xfn, yfn );

	var mstart = parseFloat(document.forms[ "jg_input"].elements[ "meshstart" ].value); //;
	var mstop = parseFloat(document.forms[ "jg_input"].elements[ "meshend" ].value); //;
	var msize = parseFloat(document.forms[ "jg_input"].elements[ "meshsize" ].value); //;
	
	coord.scaleToCurve( pfn, mstart, mstop, msize );

	drawcurve( pfn, coord, mstart, mstop, msize );
}
</script>
</head>
<body>
<div class="jgdialog">
<form id="jg_input">
<table>
<tr><td>Y equation:</td><td><input name="yformula" value="x*x" /></td></tr>
<tr><td>X equation:</td><td><input name="xformula" value="x" /></td></tr>
<tr><td>Path start:</td><td><input name="meshstart" value="-1" </td></tr>
<tr><td>Path end:</td><td><input name="meshend" value="1" /></td></tr>
<tr><td>Mesh size:</td><td><input name="meshsize" value="0.1" /></td></tr>
<tr><td></td><td><img id="start_calc" src="jggraph.jpg" onClick="javascript:jggraph(unitsquare)" /></td></tr>
</table>
</form>
<script type="text/javascript" >
drawrectangle( "whiterectangle", 0, 0, "100%", "100%" );  // make a background rectangle, not necessary with default browser settings
var unitsquare = new jgcoordinates();
/*
startpoint = unitsquare.pointToScreenCoordinates( -1, -1 );
endpoint = unitsquare.pointToScreenCoordinates( 1, 1 );
jgx2diff = jgdiff( xsquared, 0.01 );
unitsquare.scaleToCurve( jgx2diff, -1, 1, 0.1 );
drawcurve( jgx2diff, unitsquare, -1, 1, 0.1 );
jgx2int = jgint( xsquared, 0.1 );
drawcurve( jgx2int, unitsquare, -1, 1, 0.1 );
jgx2diffint = jgdiff( jgx2int, 0.1 );
drawcurve( jgx2diffint, unitsquare, -1, 1, 0.1 );
*/
yaxis1 = unitsquare.pointToScreenCoordinates( 0, unitsquare.y1 );
yaxis0 = unitsquare.pointToScreenCoordinates( 0, unitsquare.y0 );
drawline( 1, yaxis0.x, yaxis0.y, yaxis1.x, yaxis1.y );
xaxis1 = unitsquare.pointToScreenCoordinates( unitsquare.x1, 0 );
xaxis0 = unitsquare.pointToScreenCoordinates( unitsquare.x0, 0 );
drawline( 1, xaxis0.x, xaxis0.y, xaxis1.x, xaxis1.y );
yaxis1 = unitsquare.pointToScreenCoordinates( 1, unitsquare.y1 );
yaxis0 = unitsquare.pointToScreenCoordinates( 1, unitsquare.y0 );
//drawline( 1, yaxis0.x, yaxis0.y, yaxis1.x, yaxis1.y );
yaxis1 = unitsquare.pointToScreenCoordinates( -1, unitsquare.y1 );
yaxis0 = unitsquare.pointToScreenCoordinates( -1, unitsquare.y0 );
//drawline( 1, yaxis0.x, yaxis0.y, yaxis1.x, yaxis1.y );
</script>
</body>
</html>