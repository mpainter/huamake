Here is the finished javascript graphing calculator.  If you have followed this series from the beginning, I have built up from some simple concepts to a somewhat interesting, if basic, application.  Well, software is never really done, but this is a logical stopping point for this series.  With this series, I have also discussed the usage of most of the javascript "power tools" that I use (loops and conditions, functions, objects, closures, regular expressions, associative arrays, etc )

This hub does include a couple new concepts.  I use an associative array to enforce what is acceptable in an equation to be graphed, and also to simplify the expressions the user has to write, some.  For example allowedFunctions[ "sin" ] maps "sin" to the javascript function "Math.sin".  It is often very useful to look up a value using a string as a key.

In general, the user will type in a fairly natural expression like D( sin( 2 * PI * x )), and the parsing code will make sure that the functions envoked are ones I chose to support (ln, exp, pow, sqrt, sin, cos, tan, acos, asin, atan, D, S ), operators ( +, -, /, *, ,), symbolic constants ( PI, E ), literal numeric constants, or "x", the path variable used to calculate the points to be graphed.  D is a path derrivative function which I discussed in an earlier hub in this series.  S is a path integral function.

It would have saved me a lot of graph paper, if I had had something like this when I was in college.

I parse the querystring of the URL that invoked the javascript calculator.  This would make it possible to send someone a link to an equation you wanted them to graph. However, now that I am doing this my security concern about links containing reflected javascript, is also a possibility, but not one to fear now that the parsing code is in place.

Finally, I figured out most of my bugs in parsing regular expressions, and it was a bit of an amature's mistake.  The back-slashes in the expressions themselves need to be escaped. (e.g. It is \\s not \s that is required to represent white space.)  This tells you I have previously used regular expressions in languages other than javascript.  Oh well, there is always something to learn.  Using "(" as a literal still crashes the regular expression engine, though.  I also moved the drawing of the axis into the function that scales the graphing area.  If you graph several functions in sequence, you may see multiple axis drawn as a result; not perfect, but to do otherwise would require knowing all of the functions you want to graph ahead of time.  This is quite possible, but if you want the graphing calculator to work this way, please, be my guest and make the changes yourself.

If you just want to use the graphing calculator, I put it up on a web site http://huamake.com/graphingcalculator.htm 